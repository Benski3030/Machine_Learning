# A more numerically stable way of calculating log( sum( exp( x ))) Source:
# http://r.789695.n4.nabble.com/logsumexp-function-in-R-td3310119.html
logsumexp <- function(x) {
  xmax <- which.max(x)
  log1p(sum(exp(x[-xmax] - x[xmax]))) + x[xmax]
}

# Silently returns samples from Jeffreys’ substitution posterior given a
# vector of data (x). Also produces a histogram of the posterior and prints
# out a 95% quantile credible interval. Assumes a non-informative uniform
# [-Inf, Inf] prior over the median.
jeffreys_median <- function(x, n_samples = 10000, draw_plot = TRUE) {
  x <- sort(x)
  n <- length(x)
  loglike <- 1 - lfactorial(1:(n - 1)) - lfactorial((n - 1):1)
  interval_loglike <- loglike + log(diff(x))
  interval_prob <- exp(interval_loglike - logsumexp(interval_loglike))
  samp_inter <- sample.int(n - 1, n_samples, replace = TRUE, prob = interval_prob)
  s <- runif(n_samples, x[samp_inter], x[samp_inter + 1])
  cat("\n  Jeffreys’ Substitution Posterior for the median\n\n")
  cat("median\n  ", median(x), "\n")
  cat("95% CI\n  ", quantile(s, c(0.025, 0.975)), "\n")
  if (draw_plot) {
    hist(s, 30, freq = FALSE, main = "Posterior of the median", xlab = "median")
    lines(quantile(s, c(0.025, 0.975)), c(0, 0), col = "red", lwd = 5)
    legend("topright", legend = "95% CI", col = "red", lwd = 5)
  }
  invisible(s)
}
